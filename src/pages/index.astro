---
import Layout from '../layouts/Layout.astro';
import SkillCard from '../components/SkillCard.astro';
import { translations } from '../i18n/translations';

// Get the language from the URL or default to English
const lang = Astro.url.searchParams.get('lang') || 'en';
const t = translations[lang];

// Icons
const frontendIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
</svg>`;

const backendIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
</svg>`;

const roboticsIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
</svg>`;

const databaseIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
</svg>`;

const cloudIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z" />
</svg>`;

const toolsIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
</svg>`;

const githubIcon = `<svg viewBox="0 0 24 24" class="w-6 h-6" fill="currentColor">
  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
</svg>`;

const zennIcon = `<svg role="img" viewBox="0 0 24 24" class="w-6 h-6" fill="currentColor">
  <path d="M.264 23.771h4.984c.264 0 .498-.147.645-.352L19.614.874c.176-.293-.029-.645-.381-.645h-4.72c-.235 0-.44.117-.557.323L.03 23.361c-.088.176.029.41.234.41zM17.445 23.419l6.479-10.408c.205-.323-.029-.733-.41-.733h-4.691c-.176 0-.352.088-.44.235l-6.655 10.643c-.176.264.029.616.352.616h4.779c.234-.001.468-.118.586-.353z"/>
</svg>`;

const linkedinIcon = `<svg viewBox="0 0 24 24" class="w-6 h-6" fill="currentColor">
  <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
</svg>`;
---

<Layout title="So Onishi - Portfolio">
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <!-- Hero Section -->
    <section class="text-center mb-16">
      <div class="flex justify-center mb-6">
        <img src="/images/heisenberg-icon.svg" alt="Heisenberg Icon" class="h-32 w-32 dark:hidden" />
        <img src="/images/heisenberg-icon-dark.svg" alt="Heisenberg Icon" class="h-32 w-32 hidden dark:block" />
      </div>
      <h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4" data-i18n="hero.name"></h1>
      <div class="max-w-4xl mx-auto">
        <p class="text-lg text-gray-700 dark:text-gray-300 leading-relaxed" data-i18n="hero.description"></p>
      </div>
    </section>

    <!-- About Section -->
    <section id="about" class="mb-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6" data-i18n="about.title"></h2>
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <p class="text-gray-700 dark:text-gray-300 mb-4 font-bold text-lg" data-i18n="about.passion"></p>
      <div class="mb-6">
        <h3 class="font-semibold mb-4 dark:text-gray-200" data-i18n="about.experience.title"></h3>
        <div class="space-y-6 max-h-96 overflow-y-auto" id="experience-list">
        <!-- Experience items will be populated by JavaScript -->
        </div>
      </div>
      </div>
    </section>

    <!-- News Section -->
    <section id="news" class="mb-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6" data-i18n="news.title"></h2>
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 overflow-y-auto max-h-48">
        <ul class="space-y-4" id="news-list">
          <!-- News items will be populated by JavaScript -->
        </ul>
      </div>
    </section>

    <!-- Research Section -->
    <section id="research" class="mb-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6" data-i18n="research.title"></h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="research-list">
        <!-- Research items will be populated by JavaScript -->
      </div>
    </section>

    <!-- Projects Section -->
    <section id="projects" class="mb-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6" data-i18n="projects.title"></h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="project-list">
        <!-- Project items will be populated by JavaScript -->
      </div>
    </section>

    <!-- Skills Section -->
    <section id="skills" class="mb-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6" data-i18n="skills.title"></h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div data-skill-type="frontend">
          <SkillCard
            title={t.skills.frontend.title}
            skills={t.skills.frontend.skills}
            icon={frontendIcon}
          />
        </div>
        <div data-skill-type="backend">
          <SkillCard
            title={t.skills.backend.title}
            skills={t.skills.backend.skills}
            icon={backendIcon}
          />
        </div>
        <div data-skill-type="robotics">
          <SkillCard
            title={t.skills.robotics.title}
            skills={t.skills.robotics.skills}
            icon={roboticsIcon}
          />
        </div>
        <div data-skill-type="database">
          <SkillCard
            title={t.skills.database.title}
            skills={t.skills.database.skills}
            icon={databaseIcon}
          />
        </div>
        <div data-skill-type="cloud">
          <SkillCard
            title={t.skills.cloud.title}
            skills={t.skills.cloud.skills}
            icon={cloudIcon}
          />
        </div>
        <div data-skill-type="tools">
          <SkillCard
            title={t.skills.tools.title}
            skills={t.skills.tools.skills}
            icon={toolsIcon}
          />
        </div>
      </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="mb-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6" data-i18n="contact.title"></h2>
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <a href="https://github.com/soso0024" 
             class="flex items-center gap-3 p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary dark:hover:border-primary hover:text-primary dark:hover:text-primary transition-colors"
             target="_blank">
            <span class="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary" set:html={githubIcon} />
            <div>
              <div class="font-medium dark:text-gray-200" data-i18n="contact.github.title"></div>
              <div class="text-sm text-gray-500 dark:text-gray-400" data-i18n="contact.github.description"></div>
            </div>
          </a>
          <a href="https://zenn.dev/os515" 
             class="flex items-center gap-3 p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary dark:hover:border-primary hover:text-primary dark:hover:text-primary transition-colors"
             target="_blank">
            <span class="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary" set:html={zennIcon} />
            <div>
              <div class="font-medium dark:text-gray-200" data-i18n="contact.zenn.title"></div>
              <div class="text-sm text-gray-500 dark:text-gray-400" data-i18n="contact.zenn.description"></div>
            </div>
          </a>
          <a href="https://www.linkedin.com/in/so-onishi/" 
             class="flex items-center gap-3 p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary dark:hover:border-primary hover:text-primary dark:hover:text-primary transition-colors"
             target="_blank">
            <span class="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary" set:html={linkedinIcon} />
            <div>
              <div class="font-medium dark:text-gray-200" data-i18n="contact.linkedin.title"></div>
              <div class="text-sm text-gray-500 dark:text-gray-400" data-i18n="contact.linkedin.description"></div>
            </div>
          </a>
        </div>
      </div>
    </section>
  </main>

  <script>
    import { translations } from '../i18n/translations';

    function getNestedValue(obj: any, path: string): string {
      return path.split('.').reduce((current, key) => current?.[key], obj) as string;
    }

    function updateExperienceSection(lang: string) {
      const experienceListElement = document.getElementById('experience-list');
      if (!experienceListElement) return;

      const experienceItems = translations[lang].about.experience.items;
      experienceListElement.innerHTML = experienceItems.map(item => `
        <div class="border-l-2 border-primary dark:border-blue-400 pl-4">
          <div class="flex justify-between items-start mb-1">
            <div>
              <h4 class="font-medium text-gray-900 dark:text-gray-100">${item.role}</h4>
              <p class="text-gray-600 dark:text-gray-400">${item.company}</p>
            </div>
            <span class="text-sm text-gray-500 dark:text-gray-400">${item.period}</span>
          </div>
          <p class="text-gray-600 dark:text-gray-400">${item.description}</p>
        </div>
      `).join('');
    }

    function updateResearchSection(lang: string) {
      const researchListElement = document.getElementById('research-list');
      if (!researchListElement) return;

      const researchItems = translations[lang].research.items;
      researchListElement.innerHTML = researchItems.map(item => `
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 transition-shadow hover:shadow-lg relative">
          <h3 class="text-xl font-semibold mb-2 dark:text-gray-200">${item.title}</h3>
          <p class="text-gray-700 dark:text-gray-300 mb-4">${item.description}</p>
          <br>
          <div class="flex justify-between items-end">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute bottom-4 left-4">${item.period}</span>
            <div class="flex space-x-4 absolute bottom-4 right-4">
              ${item.github ? `
                <a
                  href="${item.github}"
                  class="text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300"
                  target="_blank"
                  data-i18n="research.viewOnGithub"
                >GitHub</a>
              ` : ''}
              ${item.conference ? `
                <a
                  href="${item.conference}"
                  class="text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300"
                  target="_blank"
                  data-i18n="research.viewConference"
                >Conference</a>
              ` : ''}
            </div>
          </div>
        </div>
      `).join('');
    }

    function updateNewsSection(lang: string) {
      const newsListElement = document.getElementById('news-list');
      if (!newsListElement) return;

      const newsItems = translations[lang].news.items;
      newsListElement.innerHTML = newsItems.map(item => `
        <li class="flex items-start">
          <span class="text-gray-700 dark:text-gray-300 mr-2">${item.description.slice(-2)}</span>
          <div>
            <div class="font-medium text-gray-900 dark:text-gray-100">${item.date}</div>
            <div class="text-gray-600 dark:text-gray-400">${item.description.slice(0, -2)}</div>
          </div>
        </li>
      `).join('');
    }

    function updateProjectSection(lang) {
    const projectListElement = document.getElementById('project-list');
    if (!projectListElement) return;

    const projectItems = translations[lang].projects.items;
    projectListElement.innerHTML = projectItems.map(item => `
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 transition-shadow hover:shadow-lg relative">
        <h3 class="text-xl font-semibold mb-2 dark:text-gray-200">${item.title}</h3>
        <p class="text-gray-700 dark:text-gray-300 mb-2">${item.description}</p>
        <br>
        <div class="flex space-x-4 absolute bottom-4 right-4">
          <a
            href="${item.github}"
            class="text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300"
            target="_blank"
          >${translations[lang].projects.viewOnGithub}</a>
          ${item.project_url ? `
            <a
              href="${item.project_url}"
              class="text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300"
              target="_blank"
            >Demo</a>
          ` : ''}
        </div>
      </div>
      `).join('');
    }

    function updateSkillsSection(lang: string) {
      const skillsData = translations[lang].skills;
      
      // Update frontend skills
      const frontendSkillCard = document.querySelector('[data-skill-type="frontend"]');
      if (frontendSkillCard) {
        const skillsList = frontendSkillCard.querySelector('ul');
        if (skillsList) {
          skillsList.innerHTML = skillsData.frontend.skills.map(skill => `
            <li class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700 dark:text-gray-300">${skill}</span>
            </li>
          `).join('');
        }
        const title = frontendSkillCard.querySelector('h3');
        if (title) {
          title.textContent = skillsData.frontend.title;
        }
      }
      
      // Update backend skills
      const backendSkillCard = document.querySelector('[data-skill-type="backend"]');
      if (backendSkillCard) {
        const skillsList = backendSkillCard.querySelector('ul');
        if (skillsList) {
          skillsList.innerHTML = skillsData.backend.skills.map(skill => `
            <li class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700 dark:text-gray-300">${skill}</span>
            </li>
          `).join('');
        }
        const title = backendSkillCard.querySelector('h3');
        if (title) {
          title.textContent = skillsData.backend.title;
        }
      }
      
      // Update robotics skills
      const roboticsSkillCard = document.querySelector('[data-skill-type="robotics"]');
      if (roboticsSkillCard) {
        const skillsList = roboticsSkillCard.querySelector('ul');
        if (skillsList) {
          skillsList.innerHTML = skillsData.robotics.skills.map(skill => `
            <li class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700 dark:text-gray-300">${skill}</span>
            </li>
          `).join('');
        }
        const title = roboticsSkillCard.querySelector('h3');
        if (title) {
          title.textContent = skillsData.robotics.title;
        }
      }
      
      // Update database skills
      const databaseSkillCard = document.querySelector('[data-skill-type="database"]');
      if (databaseSkillCard) {
        const skillsList = databaseSkillCard.querySelector('ul');
        if (skillsList) {
          skillsList.innerHTML = skillsData.database.skills.map(skill => `
            <li class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700 dark:text-gray-300">${skill}</span>
            </li>
          `).join('');
        }
        const title = databaseSkillCard.querySelector('h3');
        if (title) {
          title.textContent = skillsData.database.title;
        }
      }
      
      // Update cloud skills
      const cloudSkillCard = document.querySelector('[data-skill-type="cloud"]');
      if (cloudSkillCard) {
        const skillsList = cloudSkillCard.querySelector('ul');
        if (skillsList) {
          skillsList.innerHTML = skillsData.cloud.skills.map(skill => `            <li class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700 dark:text-gray-300">${skill}</span>
            </li>
          `).join('');
        }
        const title = cloudSkillCard.querySelector('h3');
        if (title) {
          title.textContent = skillsData.cloud.title;
        }
      }
      
      // Update tools skills
      const toolsSkillCard = document.querySelector('[data-skill-type="tools"]');
      if (toolsSkillCard) {
        const skillsList = toolsSkillCard.querySelector('ul');
        if (skillsList) {
          skillsList.innerHTML = skillsData.tools.skills.map(skill => `
            <li class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700 dark:text-gray-300">${skill}</span>
            </li>
          `).join('');
        }
        const title = toolsSkillCard.querySelector('h3');
        if (title) {
          title.textContent = skillsData.tools.title;
        }
      }
    }

    function updateContent(lang: string) {
      const elements = document.querySelectorAll('[data-i18n]');
      elements.forEach((element) => {
        const key = element.getAttribute('data-i18n');
        if (key) {
          const value = getNestedValue(translations[lang], key);
          if (element instanceof HTMLElement) {
            element.textContent = value;
          }
        }
      });

      // Update experience, research, news, and project sections separately since they require special handling
      updateExperienceSection(lang);
      updateResearchSection(lang);
      updateNewsSection(lang);
      updateProjectSection(lang);
      updateSkillsSection(lang);
    }

    // Initialize with stored language or default to English
    const initialLang = localStorage.getItem('lang') || 'en';
    updateContent(initialLang);

    // Listen for language changes
    document.addEventListener('languageChange', ((event: CustomEvent) => {
      updateContent(event.detail.lang);
    }) as EventListener);
  </script>
</Layout>

